From 05c0217be00a075ddca303a39fb6d349143f2730 Mon Sep 17 00:00:00 2001
From: Ime <imeasamudo@gmail.com>
Date: Sun, 8 Dec 2024 23:30:02 -0700
Subject: [PATCH] Moved inlcude files

---
 misc-modules/Makefile                         |  2 +-
 .../include}/access_ok_version.h              |  0
 {include => misc-modules/include}/lddbus.h    |  0
 .../include}/proc_ops_version.h               |  0
 scull/Makefile                                |  2 +-
 scull/include/access_ok_version.h             | 15 +++++++
 scull/include/lddbus.h                        | 39 +++++++++++++++++++
 scull/include/proc_ops_version.h              | 34 ++++++++++++++++
 8 files changed, 90 insertions(+), 2 deletions(-)
 rename {include => misc-modules/include}/access_ok_version.h (100%)
 rename {include => misc-modules/include}/lddbus.h (100%)
 rename {include => misc-modules/include}/proc_ops_version.h (100%)
 create mode 100644 scull/include/access_ok_version.h
 create mode 100644 scull/include/lddbus.h
 create mode 100644 scull/include/proc_ops_version.h

diff --git a/misc-modules/Makefile b/misc-modules/Makefile
index f4e6e34..0551600 100644
--- a/misc-modules/Makefile
+++ b/misc-modules/Makefile
@@ -5,7 +5,7 @@
 # This conditional selects whether we are being included from the
 # kernel Makefile or not.
 
-LDDINC=$(PWD)/../include
+LDDINC=$(PWD)/include
 EXTRA_CFLAGS += -I$(LDDINC)
 
 ifeq ($(KERNELRELEASE),)
diff --git a/include/access_ok_version.h b/misc-modules/include/access_ok_version.h
similarity index 100%
rename from include/access_ok_version.h
rename to misc-modules/include/access_ok_version.h
diff --git a/include/lddbus.h b/misc-modules/include/lddbus.h
similarity index 100%
rename from include/lddbus.h
rename to misc-modules/include/lddbus.h
diff --git a/include/proc_ops_version.h b/misc-modules/include/proc_ops_version.h
similarity index 100%
rename from include/proc_ops_version.h
rename to misc-modules/include/proc_ops_version.h
diff --git a/scull/Makefile b/scull/Makefile
index 3f6c8d0..39406b4 100644
--- a/scull/Makefile
+++ b/scull/Makefile
@@ -9,7 +9,7 @@ else
   DEBFLAGS = -O2
 endif
 
-LDDINC=$(PWD)/../include
+LDDINC=$(PWD)/include
 
 EXTRA_CFLAGS += $(DEBFLAGS)
 EXTRA_CFLAGS += -I$(LDDINC)
diff --git a/scull/include/access_ok_version.h b/scull/include/access_ok_version.h
new file mode 100644
index 0000000..354f240
--- /dev/null
+++ b/scull/include/access_ok_version.h
@@ -0,0 +1,15 @@
+/*
+ * @file access_ok_version.h
+ * @date 10/13/2019
+ *
+ */
+
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,0,0)
+#define access_ok_wrapper(type,arg,cmd) \
+	access_ok(type, arg, cmd)
+#else
+#define access_ok_wrapper(type,arg,cmd) \
+	access_ok(arg, cmd)
+#endif
diff --git a/scull/include/lddbus.h b/scull/include/lddbus.h
new file mode 100644
index 0000000..a6b349e
--- /dev/null
+++ b/scull/include/lddbus.h
@@ -0,0 +1,39 @@
+/*
+ * Definitions for the virtual LDD bus.
+ *
+ * $Id: lddbus.h,v 1.4 2004/08/20 18:49:44 corbet Exp $
+ */
+
+//extern struct device ldd_bus;
+extern struct bus_type ldd_bus_type;
+
+
+/*
+ * The LDD driver type.
+ */
+
+struct ldd_driver {
+	char *version;
+	struct module *module;
+	struct device_driver driver;
+	struct driver_attribute version_attr;
+};
+
+#define to_ldd_driver(drv) container_of(drv, struct ldd_driver, driver);
+
+/*
+ * A device type for things "plugged" into the LDD bus.
+ */
+
+struct ldd_device {
+	char *name;
+	struct ldd_driver *driver;
+	struct device dev;
+};
+
+#define to_ldd_device(dev) container_of(dev, struct ldd_device, dev);
+
+extern int register_ldd_device(struct ldd_device *);
+extern void unregister_ldd_device(struct ldd_device *);
+extern int register_ldd_driver(struct ldd_driver *);
+extern void unregister_ldd_driver(struct ldd_driver *);
diff --git a/scull/include/proc_ops_version.h b/scull/include/proc_ops_version.h
new file mode 100644
index 0000000..c700111
--- /dev/null
+++ b/scull/include/proc_ops_version.h
@@ -0,0 +1,34 @@
+#ifndef _PROC_OPS_VERSION_H
+#define _PROC_OPS_VERSION_H
+
+#include <linux/version.h>
+
+#ifdef CONFIG_COMPAT
+#define __add_proc_ops_compat_ioctl(pops, fops)					\
+	(pops)->proc_compat_ioctl = (fops)->compat_ioctl
+#else
+#define __add_proc_ops_compat_ioctl(pops, fops)
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 6, 0)
+#define proc_ops_wrapper(fops, newname)	(fops)
+#else
+#define proc_ops_wrapper(fops, newname)						\
+({										\
+ 	static struct proc_ops newname;						\
+										\
+	newname.proc_open = (fops)->open;					\
+	newname.proc_read = (fops)->read;					\
+	newname.proc_write = (fops)->write;					\
+	newname.proc_release = (fops)->release;					\
+	newname.proc_poll = (fops)->poll;					\
+	newname.proc_ioctl = (fops)->unlocked_ioctl;				\
+	newname.proc_mmap = (fops)->mmap;					\
+	newname.proc_get_unmapped_area = (fops)->get_unmapped_area;		\
+	newname.proc_lseek = (fops)->llseek;					\
+	__add_proc_ops_compat_ioctl(&newname, fops);				\
+	&newname;								\
+})
+#endif
+
+#endif
